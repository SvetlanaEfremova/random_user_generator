@model IEnumerable<User>
@{
    Layout = "_Layout";
    ViewData["Title"] = "Random users generator";
}
<h2>Random data generator</h2>
<div class="form-group row align-items-center">
    <div class="col d-flex flex-column align-items-center">
        <label for="regionSelector" class="form-label mb-1">Choose the region:</label>
        <div class="d-inline-block" style="width: 200px;">
            <select id="regionSelector" class="form-select" style="width: 100%;">
                <option value="en">English</option>
                <option value="ru">Русский</option>
                <option value="ge">ქართული</option>
            </select>
        </div>
    </div>
    <div class="col d-flex flex-column align-items-center">
        <label for="seedInput" class="form-label mb-1">Enter the seed value:</label>
        <div class="d-flex align-items-center">
            <input type="number" id="seedInput" placeholder="The seed: 0" class="form-control" style="width: 200px; margin-right: 10px;" />
            <button id="randomSeedButton" class="btn btn-primary ml-2">Random</button>
        </div>
    </div>
    <div class="col d-flex flex-column align-items-center">
        <label class="form-label mb-1 text-center" style="width: 200px;">Enter the error rate:</label>
        <div class="d-flex align-items-center">
            <input type="number" id="errorRateInput" min="0" max="1000" placeholder="The error rate: 0" class="form-control" style="width: 200px; margin-right: 10px;" />
            <input type="range" id="errorRateSlider" min="0" max="10" step="0.25" value="0" class="form-control-range" />
        </div>
    </div>
</div>
<br>
<table class="table table-bordered">
    <thead class="table-dark">
        <tr>
            <th>№</th>
            <th>Id</th>
            <th>Name</th>
            <th>Address</th>
            <th>Phone number</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Number</td>
                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Address</td>
                <td>@item.PhoneNumber</td>
            </tr>
        }
    </tbody>
</table>
<script>
    let pageNum = 0;
    let enteredSeed = 0;
    let errorRate = 0;
    let selectedRegion = "en";
    let isLoading = false;
    let isScrollLoading = false;

    console.log('debounce', debounce)

    document.getElementById('errorRateInput').addEventListener('input', (event) => {
        if (event.target.value > 1000) {
            event.target.value = 1000;
        }
        errorHandler('errorRateSlider', event)
    });

    document.getElementById('errorRateSlider').addEventListener('input', (event) => {
        errorHandler('errorRateInput', event)
    });

    async function errorHandler(elementId, event) {
        errorRate = event.target.value || 0;
        document.getElementById(elementId).value = errorRate;
        debouncedUpdateTableData();
    }

    document.getElementById('seedInput').addEventListener('input', async (event) => {
        enteredSeed = parseInt(event.target.value) || 0;
        debouncedUpdateTableData();
    });

    document.getElementById('randomSeedButton').addEventListener('click', async () => {
        const randomSeed = Math.round(Math.random() * 1000000);
        enteredSeed = randomSeed;
        document.getElementById('seedInput').value = randomSeed;
        await updateTableData(true, 20);
    });

    document.getElementById('regionSelector').addEventListener('change', async (event) => {
        selectedRegion = event.target.value;
        await updateTableData(true, 20);
    });

    document.addEventListener('scroll', async () => {
        if (isScrollLoading || isLoading) {
            return;
        }
        if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight - 200) {
            isScrollLoading = true;
            pageNum++;
            await updateTableData(false, 10);
            isScrollLoading = false;
        }
    })

    window.addEventListener('load', async () => {
        await resetCounters();
        await updateTableData(true, 20);
    });

    async function updateTableData(reload, numOfUsers)
    {
        if (isLoading) {
            return;
        }
        isLoading = true;
        if (reload) {
            clearTable();
            await resetCounters();
        }
        try {
            let users = await getUsers(numOfUsers);
            addDataToTable(users);
        } catch (error) {
            console.error('error:', error);
        }
        isLoading = false;
    }

    const debouncedUpdateTableData = debounce(function () {
        updateTableData(true, 20);
    }, 300);

    function clearTable()
    {
        const tableBody = document.querySelector('.table tbody');
        while (tableBody.firstChild) {
                tableBody.removeChild(tableBody.firstChild);
        }
    }

    function addDataToTable(users)
    {
        users.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${user.number}</td>
                <td>${user.id}</td>
                <td>${user.name}</td>
                <td>${user.address}</td>
                <td>${user.phoneNumber}</td>`;
            document.querySelector('.table tbody').appendChild(row);
        });
    }

    async function getUsers(numOfUsers) {
        const response = await sendRequestForUsers(numOfUsers);
        if (!response.ok) {
            throw new Error(`Error: ${response.status}`);
        }
        const users = response.json();
        return users;
    }

    async function sendRequestForUsers(numOfUsers) {
        let seed = enteredSeed + pageNum;
        const url = new URL('/User/GetNewUsers', window.location.origin);
        url.searchParams.append('region', selectedRegion);
        url.searchParams.append('numOfUsers', numOfUsers);
        url.searchParams.append('seed', seed);
        url.searchParams.append('errorRate', errorRate);
        url.searchParams.append('pageNum', pageNum);
        return await fetch(url, {
            method: 'GET',
        });
    }

    async function resetCounters()
    {
        pageNum = 0;
        await fetch('/User/RefreshNumberValue', {
            method: 'GET',
        });
    }

    function debounce(func, wait, immediate = false) {
        var timeout;
        return function () {
            var context = this,
                args = arguments;
            var later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            console.log('debounced')
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    };

</script>